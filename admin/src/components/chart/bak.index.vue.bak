<template>
  <div class="x-chart-container">
    <chart :ref="ref" :options="options" :theme="theme" :init-options="initOptions" :group="group" :auto-resize="autoResize" :watchShallow="watchShallow"></chart>
  </div>
</template>

<script>
import 'echarts/theme/dark'
import 'echarts/theme/infographic'
import 'echarts/theme/macarons'
import 'echarts/theme/roma'
import 'echarts/theme/shine'
import 'echarts/theme/vintage'
import methods from '@/components/mixins/methods'

const EVENTS = [
  'legendselectchanged',
  'legendselected',
  'legendunselected',
  'legendunscroll',
  'datazoom',
  'datarangeselected',
  'timelinechanged',
  'timelineplaychanged',
  'restore',
  'dataviewchanged',
  'magictypechanged',
  'geoselectchanged',
  'geoselected',
  'geounselected',
  'pieselectchanged',
  'pieselected',
  'pieunselected',
  'mapselectchanged',
  'mapselected',
  'mapunselected',
  'axisareaselected',
  'focusnodeadjacency',
  'unfocusnodeadjacency',
  'brush',
  'brushselected',
  'rendered',
  'finished',
  'click',
  'dblclick',
  'mouseover',
  'mouseout',
  'mousedown',
  'mouseup',
  'globalout'
]
export default {
  name: 'XChart',
  mixins: [methods],
  props: {
    options: Object,
    theme: {
      type: [String, Object],
      default: 'macarons'
    },
    initOptions: Object,
    group: String,
    autoResize: Boolean,
    watchShallow: Boolean
  },
  data: function () {
    return {
      ref: 'chart'
    }
  },
  mounted: function () {
    EVENTS.forEach(event => {
      this.$refs[this.ref].$on(event, ...params => this.emitEventHandler('expand', ...params))
    })
  },
  methods: {
    emitEventHandler (event) {
      this.$emit(event, ...Array.from(arguments).slice(1))
    }
  }
}
</script>

<style scoped>
.x-chart-container{
  width: 100%;
  height: 100%;
  background: white;
}
.echarts {
  height: 99%;
  width: 99%;
}
</style>
